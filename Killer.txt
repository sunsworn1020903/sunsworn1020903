local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/turtle"))()

local Window = library:Window("Rawr")

 local Players = Game.Players

 local s = setmetatable({}, {__index = function(Self, Index)
local NewService = game.GetService(game, Index)
if NewService then
Self[Index] = NewService
end
return NewService
end})

 function GetPlayer(String)
   local Found = {}
   local strl = String:lower()
       for i,v in pairs(game.Players:GetPlayers()) do
           if v.Name:lower():sub(1, #String) == String:lower() then
               table.insert(Found,v)
           end
       end    
   return Found    
end

  local function notify(Title, Text)
     Text = Text or "Text" Title= Title or "Title"
    game:GetService("StarterGui"):SetCore("SendNotification",{
 Title = Title, 
 Text = Text,
 Duration = 5,
})
    end

notify("Script made by sunsworn1", "other function is from infinite yield")

 function tools(plr)
	if plr:FindFirstChildOfClass("Backpack"):FindFirstChildOfClass('Tool') or plr.Character:FindFirstChildOfClass('Tool') then
		return true
	end
end

function getRoot(char)
	local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
	return rootPart
end

function respawn(plr)
	local char = plr.Character
	if char:FindFirstChildOfClass("Humanoid") then char:FindFirstChildOfClass("Humanoid"):ChangeState(15) end
	char:ClearAllChildren()
	local newChar = Instance.new("Model")
	newChar.Parent = workspace
	plr.Character = newChar
	wait()
	plr.Character = char
	newChar:Destroy()
end

local refreshCmd = false
function refresh(plr)
	refreshCmd = true
	local Human = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid", true)
	local pos = Human and Human.RootPart and Human.RootPart.CFrame
	local pos1 = workspace.CurrentCamera.CFrame
	respawn(plr)
	task.spawn(function()
		plr.CharacterAdded:Wait():WaitForChild("Humanoid").RootPart.CFrame, workspace.CurrentCamera.CFrame = pos, wait() and pos1
		refreshCmd = false
	end)
end

function attach(speaker,target)
	if tools(speaker) then
		local char = speaker.Character
		local tchar = target.Character
		local hum = speaker.Character:FindFirstChildOfClass("Humanoid")
		local hrp = getRoot(speaker.Character)
		local hrp2 = getRoot(target.Character)
		hum.Name = "1"
		local newHum = hum:Clone()
		newHum.Parent = char
		newHum.Name = "Humanoid"
		wait()
		hum:Destroy()
		workspace.CurrentCamera.CameraSubject = char
		newHum.DisplayDistanceType = "None"
		local tool = speaker:FindFirstChildOfClass("Backpack"):FindFirstChildOfClass("Tool") or speaker.Character:FindFirstChildOfClass("Tool")
		tool.Parent = char
		hrp.CFrame = hrp2.CFrame * CFrame.new(0, 0, 0) * CFrame.new(math.random(-100, 100)/200,math.random(-100, 100)/200,math.random(-100, 100)/200)
		local n = 0
		repeat
			wait(.1)
			n = n + 1
			hrp.CFrame = hrp2.CFrame
		until (tool.Parent ~= char or not hrp or not hrp2 or not hrp.Parent or not hrp2.Parent or n > 250) and n > 2
	else
		notify('Tool Required','You need to have an item in your inventory to use this')
	end
end

--[[ kill ]]
 
function kill(speaker,target,fast)
	if tools(speaker) then
		if target ~= nil then
			local NormPos = getRoot(speaker.Character).CFrame
			if not fast == false then
				refresh(speaker)
				wait()
				repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
				wait(0.3)
			end
			local hrp = getRoot(speaker.Character)
			attach(speaker,target)
			
				wait()
				hrp.CFrame = CFrame.new(999999, workspace.FallenPartsDestroyHeight + 1,999999)
			wait(1)
			speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
		end
	else
		notify('Tool Required','You need to have an item in your inventory to use this')
	end
end

function bring(speaker,target,fast)
	if tools(speaker) then
		if target ~= nil then
			local NormPos = getRoot(speaker.Character).CFrame
			if not fast == false then
				refresh(speaker)
				wait()
				repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
				wait(0.3)
			end
			local hrp = getRoot(speaker.Character)
			attach(speaker,target)
			repeat
				wait()
				hrp.CFrame = NormPos
			until not getRoot(target.Character) or not getRoot(speaker.Character)
			wait(1)
			speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
		end
	else
		notify('Tool Required','You need to have an item in your inventory to use this')
	end
end

local speaker = Players.LocalPlayer

local Target;

Window:Box("Target", function(text, focuslost)
   if focuslost then
   	for i,v in pairs(GetPlayer(text)) do
      if v ~= speaker then
		Target = v
	end
  end
   end
end)

Window:Button("kill", function()
   kill(speaker, Target, true)
end)

Window:Button("Fast kill", function()
    kill(speaker, Target)
end)

Window:Button("bring", function()
    bring(speaker, Target, true)
end)

Window:Button("Fast bring", function()
    bring(speaker, Target)
end)

Window:Button("attach", function()
    attach(speaker, Target)
end)

Window:Label("respawn method", Color3.fromRGB(127, 143, 166))

Window:Button("respawn", function()
    respawn(speaker)
end)

Window:Button("refresh", function()
    refresh(speaker)
end)

Window:Label("anti method", Color3.fromRGB(127, 143, 166))

local Unequipped;
local added;
local timer;
local LastPosition;
function anti_handle()
    Unequipped = speaker.Character.ChildAdded: connect (function(child)
       if child:IsA"Tool" then
        LastPosition = speaker.Character.HumanoidRootPart.CFrame
        timer = tonumber(20)
        speaker.Character:FindFirstChildOfClass"Humanoid":EquipTool(speaker:FindFirstChildOfClass"Backpack":FindFirstChildOfClass"Tool")
        wait()
        speaker.Character:FindFirstChildOfClass"Humanoid": UnequipTools()
        getRoot(speaker.Character). Anchored = true
        repeat
           wait(0)
           timer = timer - 1
            speaker.Character.HumanoidRootPart.CFrame = LastPosition
        until timer <= 0
         getRoot(speaker.Character). Anchored = false
          end
          end)
    end

 function anti_handle_Update()
    added = speaker.CharacterAdded:connect(anti_handle)
           
     end

Window:Toggle("anti handle", false, function(bool)
    if bool == true then
       anti_handle()
       anti_handle_Update()
    else
    Unequipped:Disconnect()
    added:Disconnect()
    wait()
    Unequipped = nil
    added = nil
    end
end)

Window:Button("anti fling", function()
    loadstring(game:HttpGet(('https://raw.githubusercontent.com/sunsworn1020903/sunsworn1020903/main/Anti%20flung')))()
end)

